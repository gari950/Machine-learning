
import pandas as pd
import numpy as np
dataset= pd.read_csv('flats_moscow.csv')
dataset.head()
# cosine similarity between A and B 
x=dataset['totsp']
y=dataset['dist']
m1=pd.DataFrame(x.head())
m2=pd.DataFrame(y.head())
A= np.array(m1) 
B=np.array(m2)
print("Matrix A is totsp:",A) 
print("Matrix B is dist",B)

# using sklearn to calculate cosine similarity
 
from sklearn.metrics.pairwise import cosine_similarity,cosine_distances
cos_sim=cosine_similarity(A.reshape(1,-1),B.reshape(1,-1))
print (f"Cosine Similarity between A and B:{cos_sim}")
print (f"Cosine Distance between A and B:{1-cos_sim}")
from sklearn.neighbors import DistanceMetric
print("\ndissimilarity matrix using sklearn:")
dist = DistanceMetric.get_metric('euclidean')
dist.pairwise(m1) 
print(cosine_similarity(A,B))
import matplotlib.pyplot as plt
print("A = totsp")
print("B = dist") 
print("vector A=",A)
print("vector B=",B) 
ax = plt.axes()
A=np.array(x)
B=np.array(y)
ax.arrow(0.0, 0.0, A[0], A[1], head_width=0.4, head_length=0.5)
plt.annotate(f"A({A[0]},{A[1]})", xy=(A[0], A[1]),xytext=(A[0]+0.5, A[1]))
ax.arrow(0.0, 0.0, B[0], B[1], head_width=0.4, head_length=0.5)
plt.annotate(f"B({B[0]},{B[1]})", xy=(B[0], B[1]),xytext=(B[0]+0.5, B[1]))
plt.xlim(0,10)
plt.ylim(0,10)
plt.show()
plt.close()
cos_sim=np.dot(A,B)/(np.linalg.norm(A)*np.linalg.norm(B))

